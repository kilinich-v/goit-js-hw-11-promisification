{"version":3,"sources":["webpack:///./js/js-1.js","webpack:///./js/js-2.js","webpack:///./js/js-3.js"],"names":["delay","ms","Promise","res","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","rej","map","user","updatedUsers","table","makeTransaction","transaction","resolve","reject","min","max","Math","floor","random","id","logSuccess","transactionSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACPD,EAAIF,KACLA,OAILI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbXK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAAAc,GAIfA,EAHqBF,EAASG,KAAI,SAAAC,GAAI,OAClCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,UAMnEb,EAAS,SAAAc,GAAY,OAAIZ,QAAQa,MAAMD,IAE7CN,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnBnC,IAIMgB,EAAkB,SAACC,GACrB,OAAO,IAAIpB,SAAQ,SAACqB,EAASC,GACzB,IAN2BC,EAAKC,EAM1B1B,GANqByB,EAMa,IANRC,EAMa,IAL1CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMhDrB,YAAW,WACYuB,KAAKE,SAAW,GAEtBN,EAAQ,OAAD,UAAMD,EAAN,CAAmBtB,WAAWwB,EAAOF,EAAYQ,MACtE9B,OAIL+B,EAAa,SAACC,GAChBzB,QAAQC,IAAR,eAA2BwB,EAAmBF,GAA9C,iBAAiEE,EAAmBhC,MAApF,OAGEiC,EAAW,SAAAH,GACbvB,QAAQ2B,KAAR,gCAA6CJ,EAA7C,8BAGJT,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAC7B1B,KAAKsB,GACLK,MAAMH,GAEXZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAC7B1B,KAAKsB,GACLK,MAAMH,GAEXZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,KAC7B1B,KAAKsB,GACLK,MAAMH,GAEXZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAC7B1B,KAAKsB,GACLK,MAAMH,K","file":"main.75e19baf8d96ba5c6265.js","sourcesContent":["const delay = ms => {\r\n    return new Promise(res => {\r\n        setTimeout(() => {\r\n            res(ms);\r\n        }, ms)\r\n    })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise(rej => {\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n        );\r\n        rej(updatedUsers);\r\n    });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            canProcess ? resolve({ ...transaction, delay }) : reject(transaction.id);\r\n        }, delay)\r\n    });\r\n};\r\n\r\nconst logSuccess = (transactionSuccess) => {\r\n    console.log(`Transaction ${transactionSuccess.id} processed in ${transactionSuccess.delay}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"sourceRoot":""}